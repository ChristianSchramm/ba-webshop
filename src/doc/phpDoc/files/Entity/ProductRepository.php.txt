<?php

namespace Web\Bundle\ShopBundle\Entity;

use Doctrine\Common\Collections\ArrayCollection;

use Doctrine\ORM\EntityRepository;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends EntityRepository
{
	/**
	 * Find all Products bei spezical filter
	 * 
	 * @param string $type
	 * @param string $search
	 * @param array $filter
	 * 
	 * @return \Doctrine\Common\Collections\ArrayCollection|Product
	 */
	public function findAllByFilter($type, $cond, $search, $filter, $from, $until) {
		
		// seach and type filter
		$q = $this
				->createQueryBuilder('c')
        ->leftJoin('c.image', 'p')
				->where('c.type = :type AND c.title LIKE :search  AND c.status = :cond AND c.price >= :from AND c.price <= :until')
				->setParameter('type', $type->getId())
				->setParameter('search', "%".$search."%")
				->setParameter('cond', $cond)
				->setParameter('from', $from)
				->setParameter('until', $until)
				->getQuery();
		
		$result = $q->getResult();
		$resultFinal = new ArrayCollection();
		
	
		
		// filter genre
		foreach ($result as $product){
			//echo $product->getTitle();
			$ja = 0;
			foreach ($product->getGenres() as $genre){
				//echo $genre->getName();
				if (!is_null($filter))
					foreach ($filter as $filt){
						if ($genre->getId() == $filt){
							$ja++;
						}
					}
			}
			if ($ja == count($filter)){
				$resultFinal->add($product);
			}
		}
		
		if (count($filter) > 0)
			return $resultFinal;
		else		
		  return $result;
	}
}

